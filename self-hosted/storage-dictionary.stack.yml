version: "3.7"

networks:
  hydration-data-lake:
    driver: bridge
  gateway:
    external: true

services:
  storage-dictionary-db:
    image: postgres:15
    ports:
      - "23799:5432"
    environment:
      POSTGRES_DB: "storage_dictionary_db"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    networks:
      - hydration-data-lake

  storage-dictionary-processor:
    image: storage_dictionary_indexer:latest
    depends_on:
      - storage-dictionary-db
    environment:
      NODE_ENV: "self-hosted"
      CHAIN: "hydration"
      DB_PORT: 5432
      DB_HOST: "storage-dictionary-db"
      DB_NAME: "storage_dictionary_db"
      DB_USER: "postgres"
      DB_PASS: "postgres"
    ports:
      - "3031:3031"
    networks:
      - hydration-data-lake
    command:
      - sh
      - -c
      - "sqd migration:apply && sqd process:prod"

  storage-dictionary-api:
    image: storage_dictionary_indexer:latest
    depends_on:
      - storage-dictionary-processor
    environment:
      NODE_ENV: "self-hosted"
      CHAIN: "hydration"
      GQL_PORT: 8089
      DB_PORT: 5432
      DB_HOST: "storage-dictionary-db"
      DB_NAME: "storage_dictionary_db"
      DB_USER: "postgres"
      DB_PASS: "postgres"
    ports:
      - "8090:8090"
    networks:
      - hydration-data-lake
      - gateway
    # Wait 15s for processor complete DB migrations and create service tables which are required for api app.
    # API app needs to run its own DB migrations to set up DB subscriptions.
    command:
      - sh
      - -c
      - "sleep 10 && sqd api:prod"
    deploy:
      replicas: 3
      labels:
        traefik.http.routers.hrds.rule: Host(`storage-dictionary-indexer.play.hydration.cloud`)
        traefik.http.routers.hrds.tls: "true"
        traefik.http.routers.hrds.tls.certresolver: myresolver
        traefik.http.services.hrds.loadbalancer.server.port: "8090"
