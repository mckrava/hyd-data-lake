# This workflow can be invoked only from caller workflow.
# More information about Reusing workflows - https://docs.github.com/en/actions/using-workflows/reusing-workflows

# Run API tests for Indexers.
name: "Reusable :: API test :: Liq.pools indexer with dictionary"

on:
  workflow_call:
    inputs:
      working-chain:
        required: false
        type: string
        default: hydration
      is-liq-pools-indexer-with-dictionary:
        required: true
        type: boolean
      liq-pools-indexer-from-block:
        required: true
        type: number
      liq-pools-indexer-to-block:
        required: true
        type: number
      storage-dictionary-from-block:
        required: false
        type: number
      storage-dictionary-to-block:
        required: false
        type: number
      process-lbp-pools:
        required: true
        type: boolean
      process-xyk-pools:
        required: true
        type: boolean
      process-omnipools:
        required: true
        type: boolean
      process-stablepools:
        required: true
        type: boolean
      liquidity-pools-build-artifact-name:
        required: true
        type: string
      dictionary-build-artifact-name:
        required: true
        type: string

env:
  LIQ_POOLS_INDEXER_DB_PORT: 23798
  LIQ_POOLS_INDEXER_API_PORT: 8080

  LIQ_POOLS_INDEXER_FROM_BLOCK: ${{ inputs.liq-pools-indexer-from-block }}
  LIQ_POOLS_INDEXER_TO_BLOCK: ${{ inputs.liq-pools-indexer-to-block }}

  STORAGE_DICT_DB_PORT: 23799
  STORAGE_DICT_API_PORT: 8090

  STORAGE_DICT_INDEXER_FROM_BLOCK: ${{ inputs.storage-dictionary-from-block || inputs.liq-pools-indexer-from-block }}
  STORAGE_DICT_INDEXER_TO_BLOCK: ${{ inputs.storage-dictionary-to-block || inputs.liq-pools-indexer-to-block }}

jobs:
  # Run API tests
  run:
    name: "Run"
    runs-on: ubuntu-latest
    steps:
      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: actions/checkout@v4

      # Download artifacts with Liquidity pools indexer build
      - name: "Download Liquidity pools indexer build"
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.liquidity-pools-build-artifact-name }}
          path: ./indexers/liquidity-pools/lib

      # Download artifacts with Liquidity pools indexer build
      - name: "Download Storage Dictionary indexer build"
        if: ${{ inputs.is-liq-pools-indexer-with-dictionary }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.dictionary-build-artifact-name }}
          path: ./indexers/storage-dictionary/lib

      - name: "Install Node modules for App"
        if: steps.cache-node-modules-ui-app.outputs.cache-hit != 'true'
        run: |
          npm ci

      # Change CI scripts files permissions to prevent "Permission denied" error.
      - name: "Change folders permissions"
        run: chmod -R 777 ./scripts/ci

      - name: "Run DB for liquidity-pools indexer"
        shell: bash
        env:
          DB_NAME: squid
          DB_PORT: ${{ env.LIQ_POOLS_INDEXER_DB_PORT }}
        run: |
          docker run -d \
          --name liquidity_pools \
          -e POSTGRES_DB=squid \
          -e POSTGRES_PASSWORD=postgres \
          --shm-size=1gb \
          -p ${DB_PORT}:5432 \
          postgres:15

      - name: "Run DB for storage-dictionary"
        if: ${{ inputs.is-liq-pools-indexer-with-dictionary }}
        shell: bash
        env:
          DB_NAME: store_dictionary
          DB_PORT: ${{ env.STORAGE_DICT_DB_PORT }}
        run: |
          docker run -d \
          --name store_dictionary \
          -e POSTGRES_DB=store_dictionary \
          -e POSTGRES_PASSWORD=postgres \
          --shm-size=1gb \
          -p ${DB_PORT}:5432 \
          postgres:15

      - name: "Wait for liquidity-pools DB port"
        timeout-minutes: 2
        shell: bash
        run: . ./scripts/ci/gh-actions-wait-for-port.sh $LIQ_POOLS_INDEXER_DB_PORT

      - name: "Wait for storage dictionary DB port"
        if: ${{ inputs.is-liq-pools-indexer-with-dictionary }}
        timeout-minutes: 2
        shell: bash
        run: . ./scripts/ci/gh-actions-wait-for-port.sh $STORAGE_DICT_DB_PORT

      - name: "Run storage dictionary processor"
        if: ${{ inputs.is-liq-pools-indexer-with-dictionary }}
        shell: bash
        working-directory: ./indexers/storage-dictionary
        env:
          NODE_ENV: test
          CHAIN: ${{ inputs.working-chain }}
          DB_NAME: squid
          DB_PORT:  ${{ env.STORAGE_DICT_DB_PORT }}
          GQL_PORT: ${{ env.STORAGE_DICT_API_PORT }}
          START_BLOCK: ${{ env.STORAGE_DICT_INDEXER_FROM_BLOCK }}
          END_BLOCK: ${{ env.STORAGE_DICT_INDEXER_TO_BLOCK }}
          PROCESS_LBP_POOLS: ${{ inputs.process-lbp-pools }}
          PROCESS_XYK_POOLS: ${{ inputs.process-xyk-pools }}
          PROCESS_OMNIPOOLS: ${{ inputs.process-omnipools }}
          PROCESS_STABLEPOOLS: ${{ inputs.process-stablepools }}
        run: |
          sleep 5s
          npx squid-typeorm-migration apply
          node --require=dotenv/config lib/main.js &

      - name: "Run storage-dictionary indexer api"
        if: ${{ inputs.is-liq-pools-indexer-with-dictionary }}
        shell: bash
        env:
          NODE_ENV: test
          CHAIN: ${{ inputs.working-chain }}
          GQL_PORT: ${{ env.STORAGE_DICT_API_PORT }}
        working-directory: ./indexers/storage-dictionary
        run: |
          node --require=dotenv/config lib/api.js &

      # Check of storage-dictionary indexer API status
      - name: "Wait for storage-dictionary indexer API port"
        if: ${{ inputs.is-liq-pools-indexer-with-dictionary }}
        timeout-minutes: 1
        shell: bash
        run: . ./scripts/ci/gh-actions-wait-for-port.sh $STORAGE_DICT_API_PORT

      - name: "Wait for storage-dictionary indexer reached the end of testing range"
        if: ${{ inputs.is-liq-pools-indexer-with-dictionary }}
        id: storage-dictionary-ind-status
        uses: actions/github-script@v7
        env:
          # Env variables
          INDEX_FROM_BLOCK: ${{ env.STORAGE_DICT_INDEXER_FROM_BLOCK }}
          INDEX_TO_BLOCK: ${{ env.STORAGE_DICT_INDEXER_TO_BLOCK }}
          PROCESSOR_API_URL: "http://127.0.0.1:${{ env.STORAGE_DICT_API_PORT }}/graphql"
        with:
          result-encoding: string
          script: |
            const script = require('./scripts/ci/github-script-src/wait-for-processor-status.js')
            return await script({github, context, core})

#      TODO add condition to cancel workflow if storage-dictionary-ind-status script finished with un-success result

      - name: "Run liquidity-pools indexer processor"
        shell: bash
        working-directory: ./indexers/liquidity-pools
        env:
          NODE_ENV: test
          CHAIN: ${{ inputs.working-chain }}
          DB_NAME: squid
          DB_PORT: ${{ env.LIQ_POOLS_INDEXER_DB_PORT }}
          GQL_PORT: ${{ env.LIQ_POOLS_INDEXER_API_PORT }}
          USE_STORAGE_DICTIONARY: ${{ inputs.is-liq-pools-indexer-with-dictionary }}
          INDEX_FROM_BLOCK: ${{ env.LIQ_POOLS_INDEXER_FROM_BLOCK }}
          INDEX_TO_BLOCK: ${{ env.LIQ_POOLS_INDEXER_TO_BLOCK }}
          PROCESS_LBP_POOLS: ${{ inputs.process-lbp-pools }}
          PROCESS_XYK_POOLS: ${{ inputs.process-xyk-pools }}
          PROCESS_OMNIPOOLS: ${{ inputs.process-omnipools }}
          PROCESS_STABLEPOOLS: ${{ inputs.process-stablepools }}
        run: |
          sleep 10s
          npx squid-typeorm-migration apply
          node --require=dotenv/config lib/main.js &

      - name: "Run liquidity-pools indexer api"
        shell: bash
        env:
          NODE_ENV: test
          CHAIN: ${{ inputs.working-chain }}
          GQL_PORT: ${{ env.LIQ_POOLS_INDEXER_API_PORT }}
        working-directory: ./indexers/liquidity-pools
        run: |
          node --require=dotenv/config lib/api.js &

      # Check of liquidity-pools indexer API status
      - name: "Wait for liquidity-pools indexer API port"
        timeout-minutes: 1
        shell: bash
        run: . ./scripts/ci/gh-actions-wait-for-port.sh $LIQ_POOLS_INDEXER_API_PORT

      - name: "Run github-script to wait for liquidity-pools indexer reached the end of testing range"
        id: liquidity-pools-ind-status
        uses: actions/github-script@v7
        env:
          # Env variables
          INDEX_FROM_BLOCK: ${{ env.LIQ_POOLS_INDEXER_FROM_BLOCK }}
          INDEX_TO_BLOCK: ${{ env.LIQ_POOLS_INDEXER_TO_BLOCK }}
          PROCESSOR_API_URL: "http://127.0.0.1:${{ env.LIQ_POOLS_INDEXER_API_PORT }}/graphql"
        with:
          result-encoding: string
          script: |
            const script = require('./scripts/ci/github-script-src/wait-for-processor-status.js')
            return await script({github, context, core})

      - name: "Run API tests for liquidity-pools"
        shell: bash
        env:
          CI_NODE_ENV: test
          CI_LIQUIDITY_POOLS_API_URL: "http://127.0.0.1:${{ env.LIQ_POOLS_INDEXER_API_PORT }}/graphql"
          CI_INDEX_FROM_BLOCK: ${{ env.LIQ_POOLS_INDEXER_FROM_BLOCK }}
          CI_INDEX_TO_BLOCK: ${{ env.LIQ_POOLS_INDEXER_TO_BLOCK }}
        run: |
          cd indexers/liquidity-pools
          npm run test:api
